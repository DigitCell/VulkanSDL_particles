#version 460
#extension  GL_EXT_shader_atomic_float: enable
#include "common.glsl"

#define PARTICLE_BUFFER_BIND_ID    0
#define MAPSIZE_BUFFER_BIND_ID     1
#define MAPDATA_BUFFER_BIND_ID     2
#define SIMPARAMS_UNIFORM_BIND_ID  3


layout(std430, binding = PARTICLE_BUFFER_BIND_ID ) buffer Pos {
   Particle particles[ ];
};

layout(std430, binding = MAPSIZE_BUFFER_BIND_ID ) buffer MapSize {
   int mapSize[ ];
};

layout(std430, binding = MAPDATA_BUFFER_BIND_ID ) buffer MapData {
   int mapData[ ];
};

layout (std430, binding = SIMPARAMS_UNIFORM_BIND_ID) uniform SIMPARAMS {
  SimParams simParams;
};

layout (local_size_x = 256) in;

int GetIndex(int x, int y)
{
    return y*simParams.mapSize.x+x;
}

int GetIndexMap(int i, int x, int y)
{
    int sindex=y*simParams.mapSize.x+x;
    return sindex*simParams.maxMapCellSize+i;
}

//border conditions
void BorderConditions(inout vec2 pos, inout vec2 velocity, vec2 size, float RADIUS)
{
    if(size.x - pos.x < RADIUS*2.0)
        {velocity.x = -abs(velocity.x); pos.x = size.x - RADIUS*2.0;}
    if(pos.x < RADIUS*2.0)
        {velocity.x = abs(velocity.x);  pos.x = RADIUS*2.0;}
    if(size.y - pos.y < RADIUS*2.0)
        { velocity.y= -abs(velocity.y); pos.y = size.y - RADIUS*2.0;}
    if(pos.y < RADIUS*2.0)
        {velocity.y = abs(velocity.y);  pos.y = RADIUS*2.0;}

    //pos = mod(pos, size);
}

//border conditions
void mapUpdate(int index, vec2 pos, ivec2 size)
{
        int x = int(pos.x /float(simParams.mapCellSize.x));
        int y = int(pos.y /float(simParams.mapCellSize.y));

        if (x <0) x = 0;
        else if (x > size.x - 1) x = size.x - 1;

        if (y < 0) y =0;
        else if (y > size.y - 1)
            y = size.y - 1;

        //this handles the linked list between particles on the same square
        if(mapSize[GetIndex(x,y)]<simParams.maxMapCellSize)
        {
          //  mapSize[GetIndex(x,y)]=1;
            int indexAdd=atomicAdd(mapSize[GetIndex(x,y)],1);
            //mapIndexSizeFloat[GetIndex(x,y)]=float(mapIndexSize[GetIndex(x,y)]);
            mapData[GetIndexMap(indexAdd,x,y)] = index;
        }

}


void main() {

  int indexParticle = int(gl_GlobalInvocationID.x);
  if (indexParticle >=simParams.numParticle)
    return;

  vec2 worldSize=vec2(simParams.worldSize.x,simParams.worldSize.y);
  BorderConditions(particles[indexParticle].pos, particles[indexParticle].vel, worldSize, simParams.radius);
  mapUpdate(indexParticle, particles[indexParticle].pos.xy, simParams.mapSize);

}
